{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fnil\fcharset0 Consolas-Bold;\f1\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red135\green135\blue135;\red38\green38\blue38;\red53\green65\blue117;
\red17\green137\blue135;\red133\green0\blue2;\red210\green0\blue53;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs24 \cf2 #include <LiquidCrystal.h>
\f1\b0 \cf3 \

\f0\b \cf2 #include <Servo.h> 
\f1\b0 \cf3 \
\
Servo servo1;\
\pard\pardeftab720

\f0\b \cf3 const
\f1\b0  
\f0\b \cf4 int
\f1\b0 \cf3  flexpinone 
\f0\b =
\f1\b0  \cf5 1\cf3 ;\

\f0\b const
\f1\b0  
\f0\b \cf4 int
\f1\b0 \cf3  flexpintwo 
\f0\b =
\f1\b0  \cf5 2\cf3 ;\
\
LiquidCrystal 
\f0\b \cf6 lcd
\f1\b0 \cf3 (\cf5 12\cf3 ,\cf5 11\cf3 ,\cf5 5\cf3 ,\cf5 4\cf3 ,\cf5 3\cf3 ,\cf5 2\cf3 );\

\f0\b const
\f1\b0  
\f0\b \cf4 int
\f1\b0 \cf3  analogInPin 
\f0\b =
\f1\b0  A0 ;\

\f0\b \cf4 int
\f1\b0 \cf3  sensorValue 
\f0\b =
\f1\b0  \cf5 0\cf3 ;\
\

\f0\b \cf4 void
\f1\b0 \cf3  
\f0\b \cf6 setup
\f1\b0 \cf3 () \{\
\'a0\'a0lcd.begin(\cf5 16\cf3 ,\cf5 2\cf3 );\
\'a0\'a0\
\'a0\'a0intro();\
\'a0\'a0delay(\cf5 3000\cf3 );\
\'a0\'a0showcap(); \
\'a0\'a0\
\'a0\'a0servo1.attach(\cf5 10\cf3 );\
\'a0\'a0Serial.begin(\cf5 9600\cf3 );\
\} \
\

\f0\b \cf4 void
\f1\b0 \cf3  
\f0\b \cf6 servoopen
\f1\b0 \cf3 ()\{\
\'a0servo1.write(\cf5 90\cf3 );\
\'a0delay(\cf5 3000\cf3 );\
\'a0servoclose(); \
\}\
\

\f0\b \cf4 void
\f1\b0 \cf3  
\f0\b \cf6 servoclose
\f1\b0 \cf3 ()\{\
\'a0\'a0servo1.write(\cf5 0\cf3 );\
\}\
\

\f0\b \cf4 void
\f1\b0 \cf3  
\f0\b \cf6 intro
\f1\b0 \cf3 () \{\
\'a0\'a0lcd.setCursor(\cf5 0\cf3 , \cf5 0\cf3 );\
\'a0\
\'a0\'a0
\f0\b \cf4 char
\f1\b0 \cf3  welcome[\cf5 21\cf3 ]; \
\'a0\'a0welcome[\cf5 0\cf3 ] 
\f0\b =
\f1\b0  \cf7 'W'\cf3 ; welcome[\cf5 1\cf3 ] 
\f0\b =
\f1\b0  \cf7 'e'\cf3 ; welcome[\cf5 2\cf3 ] 
\f0\b =
\f1\b0  \cf7 'l'\cf3 ; welcome[\cf5 3\cf3 ] 
\f0\b =
\f1\b0  \cf7 'c'\cf3 ; welcome[\cf5 4\cf3 ] 
\f0\b =
\f1\b0  \cf7 'o'\cf3 ;\
\'a0\'a0welcome[\cf5 5\cf3 ] 
\f0\b =
\f1\b0  \cf7 'm'\cf3 ; welcome[\cf5 6\cf3 ] 
\f0\b =
\f1\b0  \cf7 'e'\cf3 ; welcome[\cf5 7\cf3 ] 
\f0\b =
\f1\b0  \cf7 ' '\cf3 ; welcome[\cf5 8\cf3 ] 
\f0\b =
\f1\b0  \cf7 'T'\cf3 ; welcome[\cf5 9\cf3 ] 
\f0\b =
\f1\b0  \cf7 'o'\cf3 ; \
\'a0\'a0welcome[\cf5 10\cf3 ] 
\f0\b =
\f1\b0  \cf7 ' '\cf3 ; welcome[\cf5 11\cf3 ] 
\f0\b =
\f1\b0  \cf7 'S'\cf3 ; welcome[\cf5 12\cf3 ] 
\f0\b =
\f1\b0  \cf7 'm'\cf3 ; welcome[\cf5 13\cf3 ] 
\f0\b =
\f1\b0  \cf7 'a'\cf3 ; welcome[\cf5 14\cf3 ] 
\f0\b =
\f1\b0  \cf7 'r'\cf3 ;\
\'a0\'a0welcome[\cf5 15\cf3 ] 
\f0\b =
\f1\b0  \cf7 't'\cf3 ; welcome[\cf5 16\cf3 ] 
\f0\b =
\f1\b0  \cf7 ' '\cf3 ; welcome[\cf5 17\cf3 ] 
\f0\b =
\f1\b0  \cf7 'P'\cf3 ; welcome[\cf5 18\cf3 ] 
\f0\b =
\f1\b0  \cf7 'a'\cf3 ; welcome[\cf5 19\cf3 ] 
\f0\b =
\f1\b0  \cf7 'r'\cf3 ; welcome[\cf5 20\cf3 ] 
\f0\b =
\f1\b0  \cf7 'k'\cf3 ;\
\'a0\'a0\
\'a0\'a0
\f0\b for
\f1\b0  (
\f0\b \cf4 int
\f1\b0 \cf3  i 
\f0\b =
\f1\b0  \cf5 0\cf3 ; i 
\f0\b <
\f1\b0  \cf5 10\cf3 ; i
\f0\b ++
\f1\b0 ) \{\
\'a0\'a0\'a0lcd.print(welcome[i]);\
\'a0\'a0\'a0delay(\cf5 200\cf3 );\
\'a0\'a0\} \
\'a0\'a0\
\'a0\'a0lcd.setCursor(\cf5 4\cf3 ,\cf5 1\cf3 );\
\'a0\'a0\
\'a0\'a0
\f0\b for
\f1\b0  (
\f0\b \cf4 int
\f1\b0 \cf3  i 
\f0\b =
\f1\b0  \cf5 10\cf3 ; i
\f0\b <
\f1\b0  \cf5 21\cf3 ; i
\f0\b ++
\f1\b0 )\{\
\'a0\'a0\'a0\'a0lcd.print(welcome[i]);\
\'a0\'a0\'a0\'a0delay(\cf5 200\cf3 );\
\'a0\'a0\'a0\}\
\
\}\
\
\

\f0\b \cf4 void
\f1\b0 \cf3  
\f0\b \cf6 showcap
\f1\b0 \cf3 ()\{\
\'a0\'a0lcd.clear();\
\'a0\'a0lcd.setCursor(\cf5 1\cf3 ,\cf5 0\cf3 );\
\'a0\'a0
\f0\b \cf4 char
\f1\b0 \cf3  available[\cf5 14\cf3 ];\
\
\'a0\'a0available[\cf5 0\cf3 ] 
\f0\b =
\f1\b0  \cf7 'A'\cf3 ; available[\cf5 1\cf3 ] 
\f0\b =
\f1\b0  \cf7 'v'\cf3 ; available[\cf5 2\cf3 ] 
\f0\b =
\f1\b0  \cf7 'a'\cf3 ; available[\cf5 3\cf3 ] 
\f0\b =
\f1\b0  \cf7 'i'\cf3 ; available[\cf5 4\cf3 ] 
\f0\b =
\f1\b0  \cf7 'l'\cf3 ;\
\'a0\'a0available[\cf5 5\cf3 ] 
\f0\b =
\f1\b0  \cf7 ' '\cf3 ; available[\cf5 6\cf3 ] 
\f0\b =
\f1\b0  \cf7 'C'\cf3 ; available[\cf5 7\cf3 ] 
\f0\b =
\f1\b0  \cf7 'a'\cf3 ; available[\cf5 8\cf3 ] 
\f0\b =
\f1\b0  \cf7 'p'\cf3 ; available[\cf5 9\cf3 ] 
\f0\b =
\f1\b0  \cf7 'a'\cf3 ;\
\'a0\'a0available[\cf5 10\cf3 ] 
\f0\b =
\f1\b0  \cf7 'c'\cf3 ; available[\cf5 11\cf3 ] 
\f0\b =
\f1\b0  \cf7 'i'\cf3 ; available[\cf5 12\cf3 ] 
\f0\b =
\f1\b0  \cf7 't'\cf3 ;available[\cf5 13\cf3 ] 
\f0\b =
\f1\b0  \cf7 'y'\cf3 ;\
\'a0\'a0\
\'a0
\f0\b for
\f1\b0  (
\f0\b \cf4 int
\f1\b0 \cf3  i 
\f0\b =
\f1\b0  \cf5 0\cf3 ; i 
\f0\b <
\f1\b0  \cf5 14\cf3 ; i
\f0\b ++
\f1\b0 )\{\
\'a0\'a0lcd.print(available[i]);\
\'a0\'a0delay(\cf5 200\cf3 );\
\'a0\'a0\'a0\'a0\}\
\}\
\
\

\f0\b \cf4 void
\f1\b0 \cf3  
\f0\b \cf6 loop
\f1\b0 \cf3 ()\{\
\'a0\'a0sensorValue 
\f0\b =
\f1\b0  analogRead(analogInPin);\
\'a0\'a0Serial.print(\cf7 "\\nsensor = "\cf3  );\
\'a0\'a0Serial.print(sensorValue);\
\'a0\'a0
\f0\b if
\f1\b0  ( sensorValue 
\f0\b >
\f1\b0  \cf5 69\cf3  ) \{ servoopen(); \} \
\'a0\'a0lcd.setCursor(\cf5 7\cf3 ,\cf5 1\cf3 );\
\
\'a0\'a0
\f0\b \cf4 int
\f1\b0 \cf3  flexpositionone; 
\f0\b \cf4 int
\f1\b0 \cf3  flexpositiontwo; 
\f0\b \cf4 int
\f1\b0 \cf3  capacity 
\f0\b =
\f1\b0  \cf5 2\cf3 ; 
\f0\b \cf4 int
\f1\b0 \cf3  capacitytotal 
\f0\b =
\f1\b0  \cf5 2\cf3 ;\
\
\'a0\'a0flexpositionone 
\f0\b =
\f1\b0  analogRead(flexpinone);\
\'a0\'a0flexpositiontwo 
\f0\b =
\f1\b0  analogRead(flexpintwo);\
\
\'a0\'a0
\f0\b if
\f1\b0  (flexpositionone 
\f0\b >
\f1\b0  \cf5 800\cf3  
\f0\b &&
\f1\b0  flexpositiontwo 
\f0\b >
\f1\b0  \cf5 800\cf3  )\{ capacity 
\f0\b =
\f1\b0  \cf5 0\cf3 ; \}\
\'a0\'a0
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  (flexpositionone 
\f0\b >
\f1\b0  \cf5 800\cf3  
\f0\b ||
\f1\b0  flexpositiontwo 
\f0\b >
\f1\b0  \cf5 800\cf3  )\{ capacity 
\f0\b =
\f1\b0  \cf5 1\cf3 ; \}\
\'a0\'a0
\f0\b else
\f1\b0  \{ capacity 
\f0\b =
\f1\b0  \cf5 2\cf3 ;\}\
\
\'a0\'a0lcd.print(capacity);\
\
\}\
\
\
\
\
\'a0\'a0}